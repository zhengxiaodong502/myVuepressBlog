(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{351:function(_,v,e){"use strict";e.r(v);var o=e(0),c=Object(o.a)({},(function(){var _=this,v=_.$createElement,e=_._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[_._v("#")]),_._v(" 前言")]),_._v(" "),e("p",[_._v("说到 "),e("code",[_._v("Drawer")]),_._v(" 大部分的朋友可能都很陌生，那 "),e("code",[_._v("Drawer")]),_._v(" 是个什么东西？ "),e("code",[_._v("Chrome DevTools")]),_._v(" 有很多部分，被分为9个 "),e("code",[_._v("tab")]),_._v(" (俗称选项卡) ( "),e("code",[_._v("Elements")]),_._v(" ， "),e("code",[_._v("Console")]),_._v(" ， "),e("code",[_._v("Sources")]),_._v(" ， "),e("code",[_._v("Network")]),_._v(" ， 等等...)")]),_._v(" "),e("p",[_._v("但是，那仅仅是它的一部分而已！有一组平行的选项卡，被隐藏在主窗口之下。这个组合被称为 "),e("strong",[e("code",[_._v("Drawer")])])]),_._v(" "),e("h2",{attrs:{id:"_1-如何打开-drawer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-如何打开-drawer"}},[_._v("#")]),_._v(" 1. 如何打开 "),e("code",[_._v("Drawer")]),_._v(" ?")]),_._v(" "),e("p",[_._v("当你在 "),e("code",[_._v("DevTools")]),_._v("（任何选项卡）中时，按 "),e("code",[_._v("[esc]")]),_._v(" 来显示它，再次按 "),e("code",[_._v("[esc]")]),_._v(" 隐藏它：")]),_._v(" "),e("p",[e("img",{attrs:{src:"/imgs/debug/drawer_open.gif",alt:"img"}})]),_._v(" "),e("p",[_._v("默认情况下，您会看到一个 "),e("code",[_._v("console")]),_._v(" 选项卡。 与主面板的 "),e("code",[_._v("console")]),_._v(" 完全相同。 这就是为什么主面板会显示除了 "),e("code",[_._v("console")]),_._v(" 之外的每个主要标签（ "),e("code",[_._v("Elements")]),_._v(" ，"),e("code",[_._v("Sources")]),_._v(" ，"),e("code",[_._v("Network")]),_._v(" ...）- 因为在主面板中显示 "),e("code",[_._v("console")]),_._v(" 没有意义。")]),_._v(" "),e("p",[_._v("这样的 "),e("code",[_._v("console")]),_._v(" 很方便，例如在 "),e("code",[_._v("Elements")]),_._v(" 选项卡打开时，我们同时可以看到 "),e("code",[_._v("console")]),_._v(" 面板。但是在 "),e("code",[_._v("Drawer")]),_._v(" 中其实还隐藏了更多细节。")]),_._v(" "),e("h2",{attrs:{id:"_2-drawer-里面到底有什么？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-drawer-里面到底有什么？"}},[_._v("#")]),_._v(" 2. "),e("code",[_._v("Drawer")]),_._v(" 里面到底有什么？")]),_._v(" "),e("p",[e("code",[_._v("Drawer")]),_._v(" 里隐藏着许多其他功能，大多数时候你可能不需要用到它们，这也是它们为什么被隐藏起来的原因，然鹅，你可以直接选择你想展示在这里的功能。")]),_._v(" "),e("p",[_._v("点击主页面在 "),e("code",[_._v("Drawer")]),_._v("的 "),e("code",[_._v("console")]),_._v(" 面板前面的 "),e("code",[_._v("⋮")]),_._v(" 图标来打开完整选项列表。另外，你也可以打开之前我们提到的 "),e("code",[_._v("command Menu")]),_._v(" ，然后输入 "),e("code",[_._v("Drawer")]),_._v(" 来打开")]),_._v(" "),e("p",[e("img",{attrs:{src:"/imgs/debug/drawer_menu.gif",alt:"img"}})]),_._v(" "),e("p",[_._v("Okay，让我们再看一遍所有的选项：")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("Animations")])]),_._v(" "),e("li",[e("code",[_._v("Changes")])]),_._v(" "),e("li",[e("code",[_._v("Console")])]),_._v(" "),e("li",[e("code",[_._v("Coverage")])]),_._v(" "),e("li",[e("code",[_._v("Network conditions")])]),_._v(" "),e("li",[e("code",[_._v("Performance monitor")])]),_._v(" "),e("li",[e("code",[_._v("Quick source")])]),_._v(" "),e("li",[e("code",[_._v("Remote devices")])]),_._v(" "),e("li",[e("code",[_._v("Rendering")])]),_._v(" "),e("li",[e("code",[_._v("Request blocking")])]),_._v(" "),e("li",[e("code",[_._v("Search")])]),_._v(" "),e("li",[e("code",[_._v("Sensors")])]),_._v(" "),e("li",[e("code",[_._v("What’s new")])])]),_._v(" "),e("h2",{attrs:{id:"_3-控制传感器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-控制传感器"}},[_._v("#")]),_._v(" 3. 控制传感器")]),_._v(" "),e("p",[_._v("如果你正在你的应用中使用一些获取位置信息的 "),e("code",[_._v("API")]),_._v(" 而且想要测试一下它，总不能开着车环绕世界吧，(其实也不是不行😉)。")]),_._v(" "),e("p",[e("code",[_._v("Drawer")]),_._v(" 里的 "),e("code",[_._v("Sensors(传感器)")]),_._v(" 面板可以让你模拟特定的位置: 支持从预定义的位置中进行选择，添加自己的位置，或者手动键入纬度/经度。选定的值将被 "),e("code",[_._v("navigator.geolocation.watchPosition")]),_._v("（或 "),e("code",[_._v(".getCurrentPosition")]),_._v(" ）报告。")]),_._v(" "),e("p",[_._v("如果你的 "),e("code",[_._v("App")]),_._v(" 使用加速计，传感器面板也可以模拟你设备在3D空间中的位置！")]),_._v(" "),e("p",[e("img",{attrs:{src:"/imgs/debug/drawer_sensors.gif",alt:"img"}})]),_._v(" "),e("h2",{attrs:{id:"_4-模拟网络状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-模拟网络状态"}},[_._v("#")]),_._v(" 4 .模拟网络状态")]),_._v(" "),e("p",[_._v("就像伪造你的位置一样，你可以使用 "),e("code",[_._v("Drawer")]),_._v(" 里的 "),e("code",[_._v("Network conditions")]),_._v(" 面板模拟特定的网络行为：模拟互联网为典型的3G网络甚至离线！ 这通常用来了解页面资源的大小。或者测试应用的离线功能。 除此之外，"),e("code",[_._v("Network conditions")]),_._v(" 面板还可以模拟特定的用户代理。")]),_._v(" "),e("p",[e("img",{attrs:{src:"/imgs/debug/drawer_network_conditions.gif",alt:"img"}})]),_._v(" "),e("h2",{attrs:{id:"_5-拿到-source"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-拿到-source"}},[_._v("#")]),_._v(" 5.拿到 "),e("code",[_._v("source")])]),_._v(" "),e("p",[_._v("与 "),e("code",[_._v("drawer console")]),_._v(" 一样，当我要专注于 "),e("code",[_._v("Elements")]),_._v(" 面板时，有时我也想看源代码，这时就可以在 "),e("code",[_._v("drawer")]),_._v(" 中选择显示 "),e("code",[_._v("Source")]),_._v("。")]),_._v(" "),e("p",[e("img",{attrs:{src:"/imgs/debug/drawer_quick_source.png",alt:"img"}})]),_._v(" "),e("p",[_._v("如你所见，或许没有 "),e("code",[_._v("“主”Source")]),_._v(" 面板的花里胡哨的功能，没有 "),e("code",[_._v("call stack")]),_._v(" 或者 "),e("code",[_._v("control")]),_._v(" ( "),e("code",[_._v("pause")]),_._v("， "),e("code",[_._v("step over")]),_._v("， 等等)按钮。而且如果断点被触发，它也不会显示在 "),e("code",[_._v("drawer")]),_._v(" 的 "),e("code",[_._v("Quick sources")]),_._v(" 中，而是显示在主 "),e("code",[_._v("Source")]),_._v(" 中。")]),_._v(" "),e("p",[_._v("但是对于 "),e("code",[_._v("快速查看代码")]),_._v(" ，或者 "),e("code",[_._v("设置断点")]),_._v(" 来说，它却是非常有用的技巧。")]),_._v(" "),e("h2",{attrs:{id:"_6-检查代码-coverage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-检查代码-coverage"}},[_._v("#")]),_._v(" 6. 检查代码 coverage")]),_._v(" "),e("p",[_._v("实际开发中，你的页面可能并不需要位于尾部的许多代码。也许那是来自外部库的一大块 "),e("code",[_._v("JavaScript")]),_._v(" ，也许是被遗忘的选择器上的一些 "),e("code",[_._v("CSS")]),_._v(" 规则，它们不再匹配任何东西。")]),_._v(" "),e("p",[_._v("使用 "),e("code",[_._v("coverage")]),_._v(" 面板来获得关于冗余代码的摘要-细节信息。使用 "),e("code",[_._v("Drawer")]),_._v(" 菜单或者 "),e("code",[_._v("Command")]),_._v(" 菜单来打开它。")]),_._v(" "),e("p",[e("img",{attrs:{src:"/imgs/debug/drawer_coverage.gif",alt:"img"}})]),_._v(" "),e("p",[e("code",[_._v("DevTools")]),_._v(" 的 "),e("code",[_._v("coverage")]),_._v(" 工具可以跟踪当前加载的 "),e("code",[_._v("JS")]),_._v(" 和 "),e("code",[_._v("CSS")]),_._v(" 文件的 "),e("code",[_._v("哪些行正在被执行")]),_._v(" ，并显示 "),e("code",[_._v("未使用字节的百分比")]),_._v(" 。")]),_._v(" "),e("p",[_._v("它用 "),e("code",[_._v("绿色")]),_._v(" 的线条标记 "),e("code",[_._v("运行")]),_._v(" 和用 "),e("code",[_._v("红色")]),_._v(" 的线条标记 "),e("code",[_._v("未运行")]),_._v(" 。 举个例子：")]),_._v(" "),e("p",[e("img",{attrs:{src:"/imgs/debug/drawer_coverage_2.gif",alt:"img"}})]),_._v(" "),e("h2",{attrs:{id:"_7-检查你修改的内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-检查你修改的内容"}},[_._v("#")]),_._v(" 7. 检查你修改的内容")]),_._v(" "),e("p",[_._v("通过浏览器进行设计和调整 "),e("code",[_._v("css")]),_._v(" ：能够在代码执行的地方进行调试是方便又有趣的开发方式。 但在某些时候，你可能希望将 "),e("code",[_._v("已更改的内容")]),_._v(" 与 "),e("code",[_._v("最初加载的样式表")]),_._v(" 进行比较。")]),_._v(" "),e("p",[_._v("为此，可以使用 "),e("code",[_._v("DevTools' Drawer")]),_._v(" 中的更改工具。")]),_._v(" "),e("p",[e("img",{attrs:{src:"/imgs/debug/drawer_css.png",alt:"img"}})]),_._v(" "),e("p",[_._v("它不仅会使用差异形式的变化（像 "),e("code",[_._v("Git")]),_._v(" 这样的源控制工具一样）向你展示，同时还可以撤销它们。")]),_._v(" "),e("p",[_._v("举个例子：")]),_._v(" "),e("p",[e("img",{attrs:{src:"/imgs/debug/drawer_change.gif",alt:"img"}})])])}),[],!1,null,null,null);v.default=c.exports}}]);