(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{370:function(e,o,t){"use strict";t.r(o);var r=t(0),_=Object(r.a)({},(function(){var e=this,o=e.$createElement,t=e._self._c||o;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),t("p",[e._v("大多数的情况下，我们习惯使用 "),t("code",[e._v("DevTools")]),e._v(" 的 "),t("code",[e._v("console")]),e._v(" 默认对 "),t("code",[e._v("object")]),e._v(" 的转换，但有时候我们想用与众不同的方式来处理。 那我们就可以自定义输出对象的函数，它通常被称为 "),t("code",[e._v("Custom Formatter")]),e._v(" 。")]),e._v(" "),t("blockquote",[t("p",[e._v("请注意: 在我们写一个之前，需要在 "),t("code",[e._v("DevTools")]),e._v(" 进行设置 (在 "),t("code",[e._v("DevTools")]),e._v(" 的 "),t("code",[e._v("⋮")]),e._v(" 下拉框找到设置，或者按下 "),t("code",[e._v("F1")]),e._v(" ) 中把对应的设置打开:")])]),e._v(" "),t("p",[t("img",{attrs:{src:"/imgs/debug/chrome_preferences.png",alt:"img"}})]),e._v(" "),t("p",[t("code",[e._v("formatter")]),e._v(" 长什么样呢？ 它是一个对象，最多包含三个方法：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("header")]),e._v(" : 处理如何展示在 "),t("code",[e._v("console")]),e._v(" 的日志中的主要部分。")]),e._v(" "),t("li",[t("code",[e._v("hasbody")]),e._v(" : 如果你想显示一个用来展开对象的 "),t("code",[e._v("▶")]),e._v(" 箭头，返回 "),t("code",[e._v("true")])]),e._v(" "),t("li",[t("code",[e._v("body")]),e._v(" : 定义将会被显示在展开部分的内容中。")])]),e._v(" "),t("p",[e._v("一个基础的自定义 "),t("code",[e._v("formatter")])]),e._v(" "),t("p",[t("img",{attrs:{src:"/imgs/debug/console_formatter.png",alt:"img"}})]),e._v(" "),t("blockquote",[t("p",[e._v("例子里移除了循环的结构的错误处理，让它看起来更加简洁")])]),e._v(" "),t("p",[t("code",[e._v("header")]),e._v(" 方法返回了一个 "),t("a",{attrs:{href:"http://www.jsonml.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("JsonML"),t("OutboundLink")],1),e._v(" (注： "),t("code",[e._v("JsonML")]),e._v(" : "),t("code",[e._v("JSON Markup Language")]),e._v(" - "),t("code",[e._v("JSON")]),e._v(" 标记语言) 数组，由这些组成：")]),e._v(" "),t("ol",[t("li",[e._v("标签名")]),e._v(" "),t("li",[e._v("属性对象")]),e._v(" "),t("li",[e._v("内容 (文本值或者其他元素)")])]),e._v(" "),t("p",[e._v("(如果看起来很眼熟的话，那可能是因为你之前写过一些 "),t("a",{attrs:{href:"https://reactjs.org/docs/react-without-jsx.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("React 代码"),t("OutboundLink")],1),e._v(" 😄)")]),e._v(" "),t("p",[e._v("在输出的时候，这个简单的 "),t("code",[e._v("formatter")]),e._v(" 对于每一层嵌套，直接以 "),t("code",[e._v("7")]),e._v(" 个空格的缩进打印这个对象。所以现在我们的输出看起来是这样：")]),e._v(" "),t("p",[t("img",{attrs:{src:"/imgs/debug/console_JsonML.gif",alt:"img"}})]),e._v(" "),t("h2",{attrs:{id:"_1-自定义格式化转换器的应用实践"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-自定义格式化转换器的应用实践"}},[e._v("#")]),e._v(" 1. 自定义格式化转换器的应用实践")]),e._v(" "),t("p",[e._v("现有好几种 "),t("code",[e._v("custom formatter")]),e._v(" 可供选择，例如：你可以在这个 "),t("a",{attrs:{href:"https://github.com/andrewdavey/immutable-devtools",target:"_blank",rel:"noopener noreferrer"}},[e._v("immutable-devtools "),t("OutboundLink")],1),e._v("仓库中找到对于 "),t("a",{attrs:{href:"https://facebook.github.io/immutable-js/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Immutable.js"),t("OutboundLink")],1),e._v(" 结构的完美展示。但你同样可以自己造一个。")]),e._v(" "),t("p",[e._v("一般来说，每当你遇到结构不寻常的对象时，或大量的日志(最好避免这样的情况，但是有时候很有用)而你想从中做区分时，你可以采用 "),t("code",[e._v("custom formatter")]),e._v(" 来处理。")]),e._v(" "),t("p",[e._v("一个很实用的窍门：直接将你不关心，不需要区别对待的对象过滤出来，直接在 "),t("code",[e._v("header")]),e._v(" 方法里面 "),t("code",[e._v("return null")]),e._v("。让 "),t("code",[e._v("DevTools")]),e._v(" 使用默认的格式化方式来处理这些值。")]),e._v(" "),t("p",[e._v("撇开实用性，我们还可以找点乐子：")]),e._v(" "),t("p",[e._v("这是一个关于 "),t("code",[e._v("console")]),e._v(" 的蠢萌例子：它叫做 "),t("code",[e._v("console.clown()")]),e._v(" :将打印对象进行转换，而且在对象前面加上一个 "),t("code",[e._v("emoji")]),e._v(" 表情 ...")]),e._v(" "),t("blockquote",[t("p",[t("a",{attrs:{href:"https://gist.github.com/sulco/e635a7511d5ff17d44fe9bb2ab8b3cc6",target:"_blank",rel:"noopener noreferrer"}},[e._v("源码在这里"),t("OutboundLink")],1),e._v("为了方便大家尝试，源码贴在下面：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("window.devtoolsFormatters = [{\n    header: function(obj){\n      if (!obj.__clown) {\n        return null;\n      }\n      delete obj.__clown;\n      const style = `\n        color: red;\n        border: dotted 2px gray;\n        border-radius: 4px;\n        padding: 5px;\n      `\n      const content = `🤡 ${JSON.stringify(obj, null, 2)}`;\n\n      try {\n        return ['div', {style}, content]\n      } catch (err) { // for circular structures\n        return null;  // use the default formatter\n      }\n    },\n    hasBody: function(){\n        return false;\n    }\n}]\n\nconsole.clown = function (obj) {\n  console.log({...obj, __clown: true});\n}\n\nconsole.log({message: 'hello!'});   // normal log\nconsole.clown({message: 'hello!'}); // a silly log\n")])])]),t("p",[e._v("如你所见，我使用 "),t("code",[e._v("console.clown")]),e._v(" 方法打印出来的对象被添加了一个特殊的属性，便于将它区分出来，并且在 "),t("code",[e._v("formatter")]),e._v(" 中对它区别处理，但在大部分现实的案例中，这样更好：比如检查这个对象是不是某一个特殊类的实例等等。")]),e._v(" "),t("p",[e._v("对了，"),t("code",[e._v("clown")]),e._v(" 打印出来了什么东西呢？ 在下面：")]),e._v(" "),t("p",[t("img",{attrs:{src:"/imgs/debug/console_clown.png",alt:"img"}})])])}),[],!1,null,null,null);o.default=_.exports}}]);