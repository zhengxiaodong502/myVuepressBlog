(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{605:function(o,e,_){"use strict";_.r(e);var s=_(4),v=Object(s.a)({},(function(){var o=this,e=o.$createElement,_=o._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[_("h2",{attrs:{id:"前言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[o._v("#")]),o._v(" 前言")]),o._v(" "),_("p",[o._v("我最开始接触前端的时候，学会用的就是 "),_("code",[o._v("console.log")]),o._v(" ，甚至现在，大部分情况也还在用它调试，但是，在不同的场景下，除了 "),_("code",[o._v("log")]),o._v(" ，其实有更好的选择。")]),o._v(" "),_("h2",{attrs:{id:"_1-console-assert"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-console-assert"}},[o._v("#")]),o._v(" 1. "),_("code",[o._v("console.assert")])]),o._v(" "),_("p",[o._v("在 "),_("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/console/assert",target:"_blank",rel:"noopener noreferrer"}},[o._v("MDN"),_("OutboundLink")],1),o._v(" 中是这样定义的")]),o._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[o._v("console.assert(assertion, obj1 [, obj2, ..., objN]);\nconsole.assert(assertion, msg [, subst1, ..., substN]); // c-like message formatting\n")])])]),_("blockquote",[_("p",[o._v("当我们传入的第一个参数为 "),_("strong",[o._v("假")]),o._v(" 时，"),_("code",[o._v("console.assert")]),o._v(" 打印跟在这个参数后面的值。")])]),o._v(" "),_("p",[o._v("这个方法适用于什么情况呢？举个栗子：")]),o._v(" "),_("p",[_("img",{attrs:{src:"/imgs/debug/console_assert.gif",alt:"img"}})]),o._v(" "),_("p",[o._v("通过它，你可以摆脱令人讨厌的 "),_("code",[o._v("if")]),o._v(" 表达式，还可以获得堆栈信息。")]),o._v(" "),_("blockquote",[_("p",[o._v("请注意，"),_("strong",[o._v("如果你使用的 "),_("code",[o._v("NodeJS")]),o._v(" 版本 "),_("code",[o._v("≤ 10.0")]),o._v(" ， "),_("code",[o._v("console.assert")]),o._v(" 可能会中断后面代码的执行")]),o._v("，但是在 "),_("code",[o._v(".10")]),o._v(" 的版本中被修复了(当然，在浏览器中不存在这个问题)")])]),o._v(" "),_("h2",{attrs:{id:"_2-增强-log-的阅读体验"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-增强-log-的阅读体验"}},[o._v("#")]),o._v(" 2. 增强 "),_("code",[o._v("log")]),o._v(" 的阅读体验")]),o._v(" "),_("p",[o._v("有时即使你 "),_("code",[o._v("console.log")]),o._v(" 一个简单的变量，你可能会忘记（或混淆）哪一个是那个。那当你有不同的变量需要打印的时候，阅读起来会更费劲。")]),o._v(" "),_("p",[o._v("假如有这么一堆你想要输出但看起来并不易读的数据")]),o._v(" "),_("p",[_("img",{attrs:{src:"/imgs/debug/console_log.png",alt:"img"}})]),o._v(" "),_("blockquote",[_("p",[_("strong",[o._v("“哪一个值对应哪一个变量来着？”")])])]),o._v(" "),_("p",[o._v("为了让它变得更加易读，你可以打印一个对象 - 只需将所有 "),_("code",[o._v("console.log")]),o._v(" 的参数包装在大括号中。感谢 "),_("code",[o._v("ECMAScript 2015")]),o._v(" 中引入了 "),_("code",[o._v("enhanced object literal(增强对象文字面量)")]),o._v(" ，所以加上 "),_("code",[o._v("{}")]),o._v(" 已经是你需要做的全部事情了：")]),o._v(" "),_("p",[_("img",{attrs:{src:"/imgs/debug/console_literal.png",alt:"img"}})]),o._v(" "),_("h2",{attrs:{id:"_3-console-table"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-console-table"}},[o._v("#")]),o._v(" 3."),_("code",[o._v("console.table")])]),o._v(" "),_("p",[_("code",[o._v("console.table")]),o._v(" 这个小技巧在开发者中可能并没有多少人知道: 如果有一个 "),_("strong",[o._v("数组")]),o._v(" (或者是 "),_("strong",[o._v("类数组")]),o._v(" 的对象，或者就是一个 "),_("strong",[o._v("对象")]),o._v(" )需要打印，你可以使用 "),_("code",[o._v("console.table")]),o._v(" 方法将它以一个漂亮的表格的形式打印出来。它不仅会根据数组中包含的对象的所有属性，去计算出表中的列名，而且这些列都是可以 "),_("strong",[o._v("缩放")]),o._v(" 甚至 "),_("strong",[o._v("还可以排序!!!")])]),o._v(" "),_("p",[o._v("如果你觉得展示的列太多了，使用第二个参数，传入你想要展示的列的名字:")]),o._v(" "),_("p",[_("img",{attrs:{src:"/imgs/debug/console_table_2.gif",alt:"img"}})]),o._v(" "),_("blockquote",[_("p",[o._v("对于后台而言，只有 "),_("code",[o._v("node")]),o._v(" 版本大于 "),_("code",[o._v("10")]),o._v(" 以上， "),_("code",[o._v("console.table")]),o._v(" 才能起作用")])]),o._v(" "),_("h2",{attrs:{id:"_4-table-和-的配合"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-table-和-的配合"}},[o._v("#")]),o._v(" 4. table 和 "),_("code",[o._v("{}")]),o._v(" 的配合")]),o._v(" "),_("p",[o._v("我们刚刚看到了 "),_("code",[o._v("console.table")]),o._v(" 这个技巧，也了解了在他上面的 "),_("code",[o._v("{}")]),o._v(" ，那么我们为什么不将他们结合起来打造一个终极 "),_("code",[o._v("log")]),o._v(" 呢？")]),o._v(" "),_("p",[_("img",{attrs:{src:"/imgs/debug/console_table_3.png",alt:"img"}})]),o._v(" "),_("h2",{attrs:{id:"_5-console-dir"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-console-dir"}},[o._v("#")]),o._v(" 5. "),_("code",[o._v("console.dir")])]),o._v(" "),_("p",[o._v("有时候你想要打印一个 "),_("code",[o._v("DOM")]),o._v(" 节点。 "),_("code",[o._v("console.log")]),o._v(" 会将这个交互式的元素渲染成像是从 "),_("code",[o._v("Elements")]),o._v(" 中剪切出来的一样。如果说你想要查看 "),_("strong",[o._v("这个节点所关联到的真实的js对象")]),o._v(" 呢？并且想要查看他的 "),_("strong",[o._v("属性")]),o._v(" 等等？")]),o._v(" "),_("p",[o._v("在那样的情况下，就可以使用"),_("code",[o._v("console.dir")]),o._v(":")]),o._v(" "),_("p",[_("img",{attrs:{src:"/imgs/debug/console_dir.gif",alt:"img"}})]),o._v(" "),_("h2",{attrs:{id:"_6-给-logs-加上时间戳"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-给-logs-加上时间戳"}},[o._v("#")]),o._v(" 6. 给 "),_("code",[o._v("logs")]),o._v(" 加上时间戳")]),o._v(" "),_("p",[o._v("我们总是需要打印各式各样的信息，之前我们讨论了如何让输出的信息更加直观，但是如果我们需要打印相关的时间信息呢？这就用到了计时的相关操作。")]),o._v(" "),_("p",[o._v("如果你想要给你的应用中发生的事件加上一个确切的时间记录，开启 "),_("em",[o._v("timestamps")]),o._v(" 。你可以在设置(在调试工具中的 "),_("code",[o._v("⋮")]),o._v(" 下拉中找到它，或者按下 "),_("code",[o._v("F1")]),o._v(" )中来开启或者使用 "),_("a",{attrs:{href:"https://medium.com/@tomsu/devtools-tips-day-6-thecommand-menu-449eb3966d9#7404",target:"_blank",rel:"noopener noreferrer"}},[o._v("Commands Menu"),_("OutboundLink")],1),o._v("：")]),o._v(" "),_("p",[_("img",{attrs:{src:"/imgs/debug/console_time.gif",alt:"img"}})]),o._v(" "),_("h2",{attrs:{id:"_7-监测执行时间"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-监测执行时间"}},[o._v("#")]),o._v(" 7.监测执行时间")]),o._v(" "),_("p",[o._v("与其在所有事上展示一个时间戳，或许你对脚本中的特殊的节点之间执行的时间跨度更加感兴趣，对于这样的情况，我们可以采用一对有效的 "),_("code",[o._v("console")]),o._v(" 方法")]),o._v(" "),_("ul",[_("li",[_("code",[o._v("console.time()")]),o._v(" — 开启一个计时器")]),o._v(" "),_("li",[_("code",[o._v("console.timeEnd()")]),o._v(" — 结束计时并且将结果在 "),_("code",[o._v("console")]),o._v(" 中打印出来")])]),o._v(" "),_("p",[o._v("如果你想一次记录多件事，可以往这些函数中传入不同的标签值。(例如: "),_("code",[o._v("console.time('loading')")]),o._v(" ， "),_("code",[o._v("console.timeEnd('loading')")]),o._v(" )")]),o._v(" "),_("p",[_("img",{attrs:{src:"/imgs/debug/console_time_end.gif",alt:"img"}})]),o._v(" "),_("h2",{attrs:{id:"_8-给你的-console-log-加上-css-样式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_8-给你的-console-log-加上-css-样式"}},[o._v("#")]),o._v(" 8. 给你的 "),_("code",[o._v("console.log")]),o._v(" 加上 "),_("code",[o._v("CSS")]),o._v(" 样式")]),o._v(" "),_("p",[o._v("如果你给打印文本加上 "),_("code",[o._v("%c")]),o._v(" 那么 "),_("code",[o._v("console.log")]),o._v(" 的第二个参数就变成了"),_("code",[o._v("CSS")]),o._v(" 规则！这个特性可以让你的日志脱颖而出(例如 "),_("a",{attrs:{href:"https://www.facebook.com/",target:"_blank",rel:"noopener noreferrer"}},[o._v("Facebook"),_("OutboundLink")],1),o._v(" 在你打开 "),_("code",[o._v("console")]),o._v(" 的时候所做的一样)")]),o._v(" "),_("p",[_("img",{attrs:{src:"/imgs/debug/console_info.png",alt:"img"}})]),o._v(" "),_("h2",{attrs:{id:"_9-让-console-log-基于调用堆栈自动缩进"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_9-让-console-log-基于调用堆栈自动缩进"}},[o._v("#")]),o._v(" 9. 让 "),_("code",[o._v("console.log")]),o._v(" 基于调用堆栈自动缩进")]),o._v(" "),_("p",[o._v("配合 "),_("code",[o._v("Error")]),o._v(" 对象的 "),_("code",[o._v("stack")]),o._v(" 属性，让你的 "),_("code",[o._v("log")]),o._v(" 可以根据堆栈的调用自动缩进：")]),o._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[o._v("function log(message) {\n      console.log(\n        // 这句话是重点当我们 new 出来的 Error 对象时，会匹配它的stack 信息中的换行符，换行符出现的次数也等同于它在堆栈调用时的深度。\n        ' '.repeat(new Error().stack.match(/\\n/g).length - 2) + message\n      );\n    }\n\n    function foo() {\n      log('foo');\n      return bar() + bar();\n    }\n\n    function bar() {\n      log('bar');\n      return baz() + baz();\n    }\n\n    function baz() {\n      log('baz');\n      return 17;\n    }\n\n    foo();\n")])])]),_("p",[o._v("运行结果如下：")]),o._v(" "),_("p",[_("img",{attrs:{src:"/imgs/debug/console_result.png",alt:"img"}})]),o._v(" "),_("h2",{attrs:{id:"_10-直接在回调中使用-console-log"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_10-直接在回调中使用-console-log"}},[o._v("#")]),o._v(" 10. 直接在回调中使用 "),_("code",[o._v("console.log")])]),o._v(" "),_("p",[o._v("是不是经常有这样的情况，就是我确定要将什么传递给回调函数。在这种情况下，我会在里面添加一个 "),_("code",[o._v("console.log")]),o._v(" 来检查。")]),o._v(" "),_("p",[o._v("有两种方式来实现：")]),o._v(" "),_("ul",[_("li",[o._v("在回调方法的内部使用 "),_("code",[o._v("console.log")])]),o._v(" "),_("li",[_("strong",[o._v("直接使用 "),_("code",[o._v("consolelog")]),o._v(" 来作为回调方法")]),o._v("。")])]),o._v(" "),_("p",[o._v("我推荐使用第二种，因为这不仅减少了输入，还可能在回调中接收多个参数。(这在第一个解决方案中是没有的)")]),o._v(" "),_("p",[_("img",{attrs:{src:"/imgs/debug/console_callback.png",alt:"img"}})]),o._v(" "),_("h2",{attrs:{id:"_11-使用实时表达式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_11-使用实时表达式"}},[o._v("#")]),o._v(" 11. 使用实时表达式")]),o._v(" "),_("p",[o._v("在本文形成的不久前，"),_("code",[o._v("DevTools")]),o._v(" 在 "),_("code",[o._v("Console")]),o._v(" 面板中引入了一个非常漂亮的附加功能，这是一个名为 "),_("code",[o._v("Live expression")]),o._v(" 的工具")]),o._v(" "),_("p",[o._v('只需按下 "眼睛" 符号，你就可以在那里定义任何 '),_("code",[o._v("JavaScript")]),o._v(" 表达式。 它会不断更新，所以表达的结果将永远，存在 😃")]),o._v(" "),_("p",[o._v("同时支持定义好几个：")]),o._v(" "),_("p",[_("img",{attrs:{src:"/imgs/debug/console_expression.gif",alt:"img"}})])])}),[],!1,null,null,null);e.default=v.exports}}]);